{"version":3,"sources":["webpack:///./src/components/card/card.js","webpack:///./src/components/card/card-header.js","webpack:///./src/components/card/card-body.js","webpack:///./src/components/card/card-footer.js","webpack:///./src/pages/resources.js"],"names":["Card","styled","div","theme","border","radius","color","white","primary","light","dark","propTypes","children","PropTypes","node","isRequired","elevate","bool","defaultProps","CardHeader","darkgrey","padding","normal","fgColor","string","bgColor","CardBodyContents","black","CardBody","style","image","CardFooter","left","center","right","ResourceButtons","ResourceButton","Button","active","main","Resource","lightgrey","ResourceInfo","ResourceTitle","Heading","ResourceSource","grey","ResourcesPage","resources","useResources","useState","activeResourceType","setActiveResourceType","handleChangeActiveResources","index","event","title","description","keywords","onClick","reduce","sum","resource","length","map","category","i","key","id","includes","name","toLowerCase","replace","source","to","url"],"mappings":"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","file":"component---src-pages-resources-js-36d7feb25ab8a64a99cf.js","sourcesContent":["import PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nexport const Card = styled.div(({ theme }) => `\n    // & * { border: 1px solid #f99; }\n    border-radius: ${ theme.border.radius };\n    overflow: hidden;\n    margin-bottom: 3rem;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    background-color: ${ theme.color.white };\n    transition: filter 250ms;\n    filter: drop-shadow(0 0 4px rgba(0, 0, 0, 0.1));\n    &:hover {\n        filter: drop-shadow(0 0 6px rgba(0, 0, 0, 0.2));\n    }\n    a, a:active, a:visited {\n        color: ${ theme.color.primary.light };\n        transition: filter 250ms, text-decoration-color 250ms;\n        text-decoration-color: ${ theme.color.primary.light };\n        text-underline-offset: 0.1em;\n    }\n    a:hover, a:active:hover, a:visited:hover {\n        filter: brightness(1.25);\n        text-decoration-color: ${ theme.color.primary.dark };\n        text-underline-offset: 0.1em;\n    }\n`)\n\nCard.propTypes = {\n    children: PropTypes.node.isRequired,\n    elevate: PropTypes.bool.isRequired,\n}\n\nCard.defaultProps = {\n    elevate: true,\n}","import PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nexport const CardHeader = styled.div(({ theme }) => `\n    display: flex;\n    // justify-content: center;\n    // align-items: center;\n    // text-align: left;\n    color: ${ theme.color.darkgrey };\n    background: linear-gradient(#f3ffff 0%, ${ theme.color.white } 100%);\n    font-weight: bold;\n    position: relative;\n    font-size: 200%;\n    min-height: 4rem;\n    padding: ${ theme.padding.normal };\n`)\n\nCardHeader.propTypes = {\n    fgColor: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nCardHeader.defaultProps = {\n    fgColor: '#fff',\n    bgColor: 'var(--color-crimson)',\n    children: '',\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst CardBodyContents = styled.div(({ theme }) => `\n    flex: 1;\n    padding: ${ theme.padding.normal };\n    background-color: inherit;\n    color: ${ theme.color.black };\n`)\n\nCardBodyContents.propTypes = {\n    fgColor: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n}\n\nCardBodyContents.defaultProps = {\n    fgColor: 'inherit',\n    bgColor: '#fff',\n}\n\nexport const CardBody = ({ children, image, style }) => {\n    return (\n        <CardBodyContents style={ style }>\n            { children }\n        </CardBodyContents>\n    )\n}\n","import PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nexport const CardFooter = styled.div(({\n    theme,\n    left, center, right\n}) => `\n    display: flex;\n    justify-content: flex-start;\n    ${ center && 'justify-content: center' };\n    ${ right && 'justify-content: flex-end' };\n    align-items: center;\n    color: ${ theme.color.black };\n    background-color: inherit;\n    padding: ${ theme.padding.normal };\n    height: 4rem;\n`)\n\nCardFooter.propTypes = {\n    fgColor: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nCardFooter.defaultProps = {\n    fgColor: '#fff',\n    bgColor: 'var(--color-crimson)',\n}\n\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { PageContent } from '../components/layout'\nimport { SEO } from '../components/seo'\nimport { useResources } from '../hooks'\nimport { Title, Heading } from '../components/typography'\nimport { Card, CardHeader, CardBody } from '../components/card'\nimport { ExternalLinkButton } from '../components/link'\nimport { Button } from '../components/button'\n\nconst kebabCase = string => string.toLowerCase().replace(' ', '-')\n\nconst ResourceButtons = styled.div(({ theme }) => `\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: ${ theme.padding.normal };\n`)\n\nconst ResourceButton = styled(Button)(({ theme, active = false}) => `\n    display: block;\n    padding: 0.5rem 1rem;\n    margin: 0.5rem;\n    border-radius: 4px;\n    ${ active ? `background-color: ${ theme.color.primary.main };` : `background-color: ${ theme.color.darkgrey };` }\n    @media (max-width: 798px) {\n        width: 100%;\n    }\n`)\n\nconst Resource = styled.div(({ theme }) => `\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: 1rem;\n    padding-bottom: ${ theme.padding.normal };\n    &:not(:last-child) {\n        border-bottom: 1px solid ${ theme.color.lightgrey };\n    }\n    @media (max-width: 798px) {\n        flex-direction: column;\n    }\n`)\n\nconst ResourceInfo = styled.div(({ theme }) => `\n    flex: 1;\n    padding-right: ${ theme.padding.normal };\n`)\n\nconst ResourceTitle = styled(Heading)`\n    text-align: left;\n    @media (max-width: 798px) {\n        text-align: center;\n    }\n`\n\nconst ResourceSource = styled.div(({ theme }) => `\n    color: ${ theme.color.grey };\n    @media (max-width: 798px) {\n        margin-bottom: ${ theme.padding.normal };\n    }\n`)\n\nconst ResourcesPage = () => {\n    const resources = useResources()\n    const [activeResourceType, setActiveResourceType] = useState(-1)\n\n    const handleChangeActiveResources = index => event => setActiveResourceType(index)\n\n    return (\n        <PageContent>\n            <SEO \n                title=\"Resources\"\n                description=\"\"\n                keywords=\"\"\n            />\n\n            <Title>General COVID-19 Resources</Title>\n            \n            <ResourceButtons>\n                <ResourceButton onClick={ handleChangeActiveResources(-1) } active={ activeResourceType === -1 }>ALL ({ resources.reduce((sum, resource) => sum + resource.resources.length, 0) })</ResourceButton>\n                {\n                    resources.map((category, i) => (\n                        <ResourceButton key={ `${ category.title }_button` } onClick={ handleChangeActiveResources(i) } active={ activeResourceType === i }>{ category.title } ({ category.resources.length })</ResourceButton>\n                    ))\n                }\n            </ResourceButtons>\n\n            <section id=\"resource-list\">\n                {\n                    resources.map(({ title, resources }, i) => [-1, i].includes(activeResourceType) && (\n                        <Card key={ title } name={ kebabCase(title) }>\n                            <CardHeader>{ title }</CardHeader>\n                            <CardBody>\n                                {\n                                    resources.map(resource => (\n                                        <Resource key={ resource.title }>\n                                            <ResourceInfo>\n                                                <ResourceTitle>{ resource.title }</ResourceTitle>\n                                                <ResourceSource>Source: { resource.source || '-' }</ResourceSource>\n                                            </ResourceInfo>\n                                            <ExternalLinkButton to={ resource.url }>View</ExternalLinkButton>\n                                        </Resource>\n                                    ))\n                                }\n                            </CardBody>\n                        </Card>\n                    ))\n                }\n            </section>\n        </PageContent>\n    )\n}\n\nexport default ResourcesPage\n"],"sourceRoot":""}